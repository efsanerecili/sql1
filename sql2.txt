CREATE DATABASE BlogDB;
USE BlogDB;

CREATE TABLE Categories (
    Id INT PRIMARY KEY IDENTITY ,
    Name VARCHAR(255) NOT NULL UNIQUE
)
CREATE TABLE Tags (
    Id INT PRIMARY KEY IDENTITY ,
    Name VARCHAR(255) NOT NULL UNIQUE
)
CREATE TABLE Users (
    Id INT PRIMARY KEY IDENTITY ,
    UserName VARCHAR(50) NOT NULL UNIQUE,
    FullName VARCHAR(100) NOT NULL,
    Age INT CHECK (Age >= 0 AND Age <= 150)
);

CREATE TABLE Comments (
    Id INT PRIMARY KEY IDENTITY ,
    UserId INT,
    BlogId INT,
    Content VARCHAR(250) NOT NULL CHECK (LENGTH(Content) BETWEEN 1 AND 250),
    FOREIGN KEY (UserId) REFERENCES Users(Id),
    FOREIGN KEY (BlogId) REFERENCES Blogs(Id)
);
CREATE TABLE Blogs (
    Id INT PRIMARY KEY IDENTITY ,
    UserId INT,
    CategoryId INT,
    Title VARCHAR(50) NOT NULL CHECK (LENGTH(Title) BETWEEN 1 AND 50),
    Description TEXT NOT NULL,
    FOREIGN KEY (UserId) REFERENCES Users(Id),
    FOREIGN KEY (CategoryId) REFERENCES Categories(Id)
);

CREATE TABLE BlogTags (
    BlogId INT,
    TagId INT,
    PRIMARY KEY (BlogId, TagId),
    FOREIGN KEY (BlogId) REFERENCES Blogs(Id),
    FOREIGN KEY (TagId) REFERENCES Tags(Id)
);
CREATE VIEW Blog_User_Info AS
SELECT b.Title, u.UserName, u.FullName
FROM Blogs b
INNER JOIN Users u ON b.UserId = u.Id;


CREATE VIEW Blog_Category_Info AS
SELECT b.Title, c.Name AS CategoryName
FROM Blogs b
INNER JOIN Categories c ON b.CategoryId = c.Id;

CREATE PROCEDURE GetUserComments
    @userId INT
AS
BEGIN
    SELECT *
    FROM Comments
    WHERE UserId = @userId;
END;


CREATE PROCEDURE GetUserBlogs
    @userId INT
AS
BEGIN
    SELECT *
    FROM Blogs
    WHERE UserId = @userId;
END;


CREATE FUNCTION GetBlogCountByCategory
    (@categoryId INT)
RETURNS INT
AS
BEGIN
    DECLARE @count INT;
    SELECT @count = COUNT(*)
    FROM Blogs
    WHERE CategoryId = @categoryId;
    RETURN @count;
END;
CREATE FUNCTION GetUserBlogsTable
    (@userId INT)
RETURNS TABLE
AS
RETURN
(
    SELECT *
    FROM Blogs
    WHERE UserId = @userId
);
CREATE TRIGGER DeleteBlogTrigger
ON Blogs
INSTEAD OF DELETE
AS
BEGIN
    UPDATE Blogs
    SET isDeleted = 1
    WHERE Id IN (SELECT Id FROM deleted);
END;























